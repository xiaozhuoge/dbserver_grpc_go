// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: CommonProtoDBmodel.proto

package dbserver_grpc_go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChatChannelAutoReplay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplayId     int64  `protobuf:"varint,1,opt,name=ReplayId,proto3" json:"ReplayId"`
	ProChannelId int64  `protobuf:"varint,2,opt,name=ProChannelId,proto3" json:"ProChannelId"`
	TriggerText  string `protobuf:"bytes,3,opt,name=TriggerText,proto3" json:"TriggerText"`
	ReplayText   string `protobuf:"bytes,4,opt,name=ReplayText,proto3" json:"ReplayText"`
	OrderNo      int32  `protobuf:"varint,5,opt,name=OrderNo,proto3" json:"OrderNo"`
	TriggerCount int64  `protobuf:"varint,6,opt,name=TriggerCount,proto3" json:"TriggerCount"`
}

func (x *ChatChannelAutoReplay) Reset() {
	*x = ChatChannelAutoReplay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatChannelAutoReplay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatChannelAutoReplay) ProtoMessage() {}

func (x *ChatChannelAutoReplay) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatChannelAutoReplay.ProtoReflect.Descriptor instead.
func (*ChatChannelAutoReplay) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{0}
}

func (x *ChatChannelAutoReplay) GetReplayId() int64 {
	if x != nil {
		return x.ReplayId
	}
	return 0
}

func (x *ChatChannelAutoReplay) GetProChannelId() int64 {
	if x != nil {
		return x.ProChannelId
	}
	return 0
}

func (x *ChatChannelAutoReplay) GetTriggerText() string {
	if x != nil {
		return x.TriggerText
	}
	return ""
}

func (x *ChatChannelAutoReplay) GetReplayText() string {
	if x != nil {
		return x.ReplayText
	}
	return ""
}

func (x *ChatChannelAutoReplay) GetOrderNo() int32 {
	if x != nil {
		return x.OrderNo
	}
	return 0
}

func (x *ChatChannelAutoReplay) GetTriggerCount() int64 {
	if x != nil {
		return x.TriggerCount
	}
	return 0
}

type ChatWechatOutImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportId          int64  `protobuf:"varint,1,opt,name=ImportId,proto3" json:"ImportId"`
	MarkKey           string `protobuf:"bytes,2,opt,name=MarkKey,proto3" json:"MarkKey"`
	WechatName        string `protobuf:"bytes,3,opt,name=WechatName,proto3" json:"WechatName"`
	WechatSex         string `protobuf:"bytes,4,opt,name=WechatSex,proto3" json:"WechatSex"`
	WechatMemo        string `protobuf:"bytes,5,opt,name=WechatMemo,proto3" json:"WechatMemo"`
	WechatAvatarUrl   string `protobuf:"bytes,6,opt,name=WechatAvatarUrl,proto3" json:"WechatAvatarUrl"`
	WechatArea        string `protobuf:"bytes,7,opt,name=WechatArea,proto3" json:"WechatArea"`
	WechatFromSource  string `protobuf:"bytes,8,opt,name=WechatFromSource,proto3" json:"WechatFromSource"` // 来源说明
	ImportDate        string `protobuf:"bytes,9,opt,name=ImportDate,proto3" json:"ImportDate"`
	ImportTime        string `protobuf:"bytes,10,opt,name=ImportTime,proto3" json:"ImportTime"`
	IsMatched         int32  `protobuf:"varint,11,opt,name=IsMatched,proto3" json:"IsMatched"`
	MatchedName       string `protobuf:"bytes,12,opt,name=MatchedName,proto3" json:"MatchedName"`
	MatchedAvatarUrl  string `protobuf:"bytes,13,opt,name=MatchedAvatarUrl,proto3" json:"MatchedAvatarUrl"`
	MatchedDate       string `protobuf:"bytes,14,opt,name=MatchedDate,proto3" json:"MatchedDate"`
	MatchedTime       string `protobuf:"bytes,15,opt,name=MatchedTime,proto3" json:"MatchedTime"`
	BatchId           string `protobuf:"bytes,16,opt,name=BatchId,proto3" json:"BatchId"`
	Memo              string `protobuf:"bytes,17,opt,name=Memo,proto3" json:"Memo"`
	IsPickUp          int32  `protobuf:"varint,18,opt,name=IsPickUp,proto3" json:"IsPickUp"`
	InBlackList       int32  `protobuf:"varint,19,opt,name=InBlackList,proto3" json:"InBlackList"`
	InBlackListReason string `protobuf:"bytes,20,opt,name=InBlackListReason,proto3" json:"InBlackListReason"`
}

func (x *ChatWechatOutImport) Reset() {
	*x = ChatWechatOutImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatWechatOutImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatWechatOutImport) ProtoMessage() {}

func (x *ChatWechatOutImport) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatWechatOutImport.ProtoReflect.Descriptor instead.
func (*ChatWechatOutImport) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{1}
}

func (x *ChatWechatOutImport) GetImportId() int64 {
	if x != nil {
		return x.ImportId
	}
	return 0
}

func (x *ChatWechatOutImport) GetMarkKey() string {
	if x != nil {
		return x.MarkKey
	}
	return ""
}

func (x *ChatWechatOutImport) GetWechatName() string {
	if x != nil {
		return x.WechatName
	}
	return ""
}

func (x *ChatWechatOutImport) GetWechatSex() string {
	if x != nil {
		return x.WechatSex
	}
	return ""
}

func (x *ChatWechatOutImport) GetWechatMemo() string {
	if x != nil {
		return x.WechatMemo
	}
	return ""
}

func (x *ChatWechatOutImport) GetWechatAvatarUrl() string {
	if x != nil {
		return x.WechatAvatarUrl
	}
	return ""
}

func (x *ChatWechatOutImport) GetWechatArea() string {
	if x != nil {
		return x.WechatArea
	}
	return ""
}

func (x *ChatWechatOutImport) GetWechatFromSource() string {
	if x != nil {
		return x.WechatFromSource
	}
	return ""
}

func (x *ChatWechatOutImport) GetImportDate() string {
	if x != nil {
		return x.ImportDate
	}
	return ""
}

func (x *ChatWechatOutImport) GetImportTime() string {
	if x != nil {
		return x.ImportTime
	}
	return ""
}

func (x *ChatWechatOutImport) GetIsMatched() int32 {
	if x != nil {
		return x.IsMatched
	}
	return 0
}

func (x *ChatWechatOutImport) GetMatchedName() string {
	if x != nil {
		return x.MatchedName
	}
	return ""
}

func (x *ChatWechatOutImport) GetMatchedAvatarUrl() string {
	if x != nil {
		return x.MatchedAvatarUrl
	}
	return ""
}

func (x *ChatWechatOutImport) GetMatchedDate() string {
	if x != nil {
		return x.MatchedDate
	}
	return ""
}

func (x *ChatWechatOutImport) GetMatchedTime() string {
	if x != nil {
		return x.MatchedTime
	}
	return ""
}

func (x *ChatWechatOutImport) GetBatchId() string {
	if x != nil {
		return x.BatchId
	}
	return ""
}

func (x *ChatWechatOutImport) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *ChatWechatOutImport) GetIsPickUp() int32 {
	if x != nil {
		return x.IsPickUp
	}
	return 0
}

func (x *ChatWechatOutImport) GetInBlackList() int32 {
	if x != nil {
		return x.InBlackList
	}
	return 0
}

func (x *ChatWechatOutImport) GetInBlackListReason() string {
	if x != nil {
		return x.InBlackListReason
	}
	return ""
}

type K8HashBeatOtherSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatId       int64  `protobuf:"varint,1,opt,name=BeatId,proto3" json:"BeatId"`
	BeatOrder    int64  `protobuf:"varint,2,opt,name=BeatOrder,proto3" json:"BeatOrder"`
	FromAddress  string `protobuf:"bytes,3,opt,name=FromAddress,proto3" json:"FromAddress"`
	ToAddress    string `protobuf:"bytes,4,opt,name=ToAddress,proto3" json:"ToAddress"`
	CurrencyCode string `protobuf:"bytes,5,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	BeatQuota    string `protobuf:"bytes,6,opt,name=BeatQuota,proto3" json:"BeatQuota"`
	TxId         string `protobuf:"bytes,7,opt,name=TxId,proto3" json:"TxId"`
	StrategyType int32  `protobuf:"varint,8,opt,name=StrategyType,proto3" json:"StrategyType"`
	TradeDate    string `protobuf:"bytes,9,opt,name=TradeDate,proto3" json:"TradeDate"`
	TradeTime    string `protobuf:"bytes,10,opt,name=TradeTime,proto3" json:"TradeTime"`
	WinOk        int32  `protobuf:"varint,11,opt,name=WinOk,proto3" json:"WinOk"`
	IsReturn     int32  `protobuf:"varint,12,opt,name=IsReturn,proto3" json:"IsReturn"`
	ReturnQuota  string `protobuf:"bytes,13,opt,name=ReturnQuota,proto3" json:"ReturnQuota"`
	ReturnMemo   string `protobuf:"bytes,14,opt,name=ReturnMemo,proto3" json:"ReturnMemo"`
	BlockHash    string `protobuf:"bytes,15,opt,name=BlockHash,proto3" json:"BlockHash"`
}

func (x *K8HashBeatOtherSession) Reset() {
	*x = K8HashBeatOtherSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashBeatOtherSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashBeatOtherSession) ProtoMessage() {}

func (x *K8HashBeatOtherSession) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashBeatOtherSession.ProtoReflect.Descriptor instead.
func (*K8HashBeatOtherSession) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{2}
}

func (x *K8HashBeatOtherSession) GetBeatId() int64 {
	if x != nil {
		return x.BeatId
	}
	return 0
}

func (x *K8HashBeatOtherSession) GetBeatOrder() int64 {
	if x != nil {
		return x.BeatOrder
	}
	return 0
}

func (x *K8HashBeatOtherSession) GetFromAddress() string {
	if x != nil {
		return x.FromAddress
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetBeatQuota() string {
	if x != nil {
		return x.BeatQuota
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetStrategyType() int32 {
	if x != nil {
		return x.StrategyType
	}
	return 0
}

func (x *K8HashBeatOtherSession) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetWinOk() int32 {
	if x != nil {
		return x.WinOk
	}
	return 0
}

func (x *K8HashBeatOtherSession) GetIsReturn() int32 {
	if x != nil {
		return x.IsReturn
	}
	return 0
}

func (x *K8HashBeatOtherSession) GetReturnQuota() string {
	if x != nil {
		return x.ReturnQuota
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetReturnMemo() string {
	if x != nil {
		return x.ReturnMemo
	}
	return ""
}

func (x *K8HashBeatOtherSession) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type K8HashCurrencyExchange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromTxId             string `protobuf:"bytes,1,opt,name=FromTxId,proto3" json:"FromTxId"`
	FromConfirms         int32  `protobuf:"varint,2,opt,name=FromConfirms,proto3" json:"FromConfirms"`
	FlowId               int64  `protobuf:"varint,3,opt,name=FlowId,proto3" json:"FlowId"`
	FromCurrencyCode     string `protobuf:"bytes,4,opt,name=FromCurrencyCode,proto3" json:"FromCurrencyCode"`
	ToCurrencyCode       string `protobuf:"bytes,5,opt,name=ToCurrencyCode,proto3" json:"ToCurrencyCode"`
	TransactionPairName  string `protobuf:"bytes,6,opt,name=TransactionPairName,proto3" json:"TransactionPairName"`
	TransactionPairQuota string `protobuf:"bytes,7,opt,name=TransactionPairQuota,proto3" json:"TransactionPairQuota"`
	FromQuota            string `protobuf:"bytes,8,opt,name=FromQuota,proto3" json:"FromQuota"`
	ServiceChargeQuota   string `protobuf:"bytes,9,opt,name=ServiceChargeQuota,proto3" json:"ServiceChargeQuota"`
	ToQuota              string `protobuf:"bytes,10,opt,name=ToQuota,proto3" json:"ToQuota"`
	ToTxId               string `protobuf:"bytes,11,opt,name=ToTxId,proto3" json:"ToTxId"`
	ReturnStatus         int32  `protobuf:"varint,12,opt,name=ReturnStatus,proto3" json:"ReturnStatus"` // 0：无效，1：有效，2：审核中，3：处理中
	TradeDate            string `protobuf:"bytes,13,opt,name=TradeDate,proto3" json:"TradeDate"`
	TradeTime            string `protobuf:"bytes,14,opt,name=TradeTime,proto3" json:"TradeTime"`
}

func (x *K8HashCurrencyExchange) Reset() {
	*x = K8HashCurrencyExchange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashCurrencyExchange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashCurrencyExchange) ProtoMessage() {}

func (x *K8HashCurrencyExchange) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashCurrencyExchange.ProtoReflect.Descriptor instead.
func (*K8HashCurrencyExchange) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{3}
}

func (x *K8HashCurrencyExchange) GetFromTxId() string {
	if x != nil {
		return x.FromTxId
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetFromConfirms() int32 {
	if x != nil {
		return x.FromConfirms
	}
	return 0
}

func (x *K8HashCurrencyExchange) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *K8HashCurrencyExchange) GetFromCurrencyCode() string {
	if x != nil {
		return x.FromCurrencyCode
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetToCurrencyCode() string {
	if x != nil {
		return x.ToCurrencyCode
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetTransactionPairName() string {
	if x != nil {
		return x.TransactionPairName
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetTransactionPairQuota() string {
	if x != nil {
		return x.TransactionPairQuota
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetFromQuota() string {
	if x != nil {
		return x.FromQuota
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetServiceChargeQuota() string {
	if x != nil {
		return x.ServiceChargeQuota
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetToQuota() string {
	if x != nil {
		return x.ToQuota
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetToTxId() string {
	if x != nil {
		return x.ToTxId
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetReturnStatus() int32 {
	if x != nil {
		return x.ReturnStatus
	}
	return 0
}

func (x *K8HashCurrencyExchange) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *K8HashCurrencyExchange) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

type K8HashUserCashRebateWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId"`
	CurrencyCode      string `protobuf:"bytes,2,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	CurrencyBalance   string `protobuf:"bytes,3,opt,name=CurrencyBalance,proto3" json:"CurrencyBalance"`
	SettledAmount     string `protobuf:"bytes,4,opt,name=SettledAmount,proto3" json:"SettledAmount"`
	CurrencyEnabled   int32  `protobuf:"varint,5,opt,name=CurrencyEnabled,proto3" json:"CurrencyEnabled"`
	WithdrawalAddress string `protobuf:"bytes,6,opt,name=WithdrawalAddress,proto3" json:"WithdrawalAddress"`
}

func (x *K8HashUserCashRebateWallet) Reset() {
	*x = K8HashUserCashRebateWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashUserCashRebateWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashUserCashRebateWallet) ProtoMessage() {}

func (x *K8HashUserCashRebateWallet) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashUserCashRebateWallet.ProtoReflect.Descriptor instead.
func (*K8HashUserCashRebateWallet) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{4}
}

func (x *K8HashUserCashRebateWallet) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *K8HashUserCashRebateWallet) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashUserCashRebateWallet) GetCurrencyBalance() string {
	if x != nil {
		return x.CurrencyBalance
	}
	return ""
}

func (x *K8HashUserCashRebateWallet) GetSettledAmount() string {
	if x != nil {
		return x.SettledAmount
	}
	return ""
}

func (x *K8HashUserCashRebateWallet) GetCurrencyEnabled() int32 {
	if x != nil {
		return x.CurrencyEnabled
	}
	return 0
}

func (x *K8HashUserCashRebateWallet) GetWithdrawalAddress() string {
	if x != nil {
		return x.WithdrawalAddress
	}
	return ""
}

type K8HashUserCashRebateWalletFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       int64  `protobuf:"varint,1,opt,name=FlowId,proto3" json:"FlowId"`
	UserId       int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId"`
	CurrencyCode string `protobuf:"bytes,3,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	TradeQuota   string `protobuf:"bytes,4,opt,name=TradeQuota,proto3" json:"TradeQuota"`
	AfterBalance string `protobuf:"bytes,5,opt,name=AfterBalance,proto3" json:"AfterBalance"`
	TradeTxId    string `protobuf:"bytes,6,opt,name=TradeTxId,proto3" json:"TradeTxId"`
	TradeCode    int32  `protobuf:"varint,7,opt,name=TradeCode,proto3" json:"TradeCode"`
	TradeMemo    string `protobuf:"bytes,8,opt,name=TradeMemo,proto3" json:"TradeMemo"`
	TradeDate    string `protobuf:"bytes,9,opt,name=TradeDate,proto3" json:"TradeDate"`
	TradeTime    string `protobuf:"bytes,10,opt,name=TradeTime,proto3" json:"TradeTime"`
	FlowStatus   int32  `protobuf:"varint,11,opt,name=FlowStatus,proto3" json:"FlowStatus"`
	StrategyType int32  `protobuf:"varint,12,opt,name=StrategyType,proto3" json:"StrategyType"`
}

func (x *K8HashUserCashRebateWalletFlow) Reset() {
	*x = K8HashUserCashRebateWalletFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashUserCashRebateWalletFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashUserCashRebateWalletFlow) ProtoMessage() {}

func (x *K8HashUserCashRebateWalletFlow) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashUserCashRebateWalletFlow.ProtoReflect.Descriptor instead.
func (*K8HashUserCashRebateWalletFlow) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{5}
}

func (x *K8HashUserCashRebateWalletFlow) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *K8HashUserCashRebateWalletFlow) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *K8HashUserCashRebateWalletFlow) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashUserCashRebateWalletFlow) GetTradeQuota() string {
	if x != nil {
		return x.TradeQuota
	}
	return ""
}

func (x *K8HashUserCashRebateWalletFlow) GetAfterBalance() string {
	if x != nil {
		return x.AfterBalance
	}
	return ""
}

func (x *K8HashUserCashRebateWalletFlow) GetTradeTxId() string {
	if x != nil {
		return x.TradeTxId
	}
	return ""
}

func (x *K8HashUserCashRebateWalletFlow) GetTradeCode() int32 {
	if x != nil {
		return x.TradeCode
	}
	return 0
}

func (x *K8HashUserCashRebateWalletFlow) GetTradeMemo() string {
	if x != nil {
		return x.TradeMemo
	}
	return ""
}

func (x *K8HashUserCashRebateWalletFlow) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *K8HashUserCashRebateWalletFlow) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *K8HashUserCashRebateWalletFlow) GetFlowStatus() int32 {
	if x != nil {
		return x.FlowStatus
	}
	return 0
}

func (x *K8HashUserCashRebateWalletFlow) GetStrategyType() int32 {
	if x != nil {
		return x.StrategyType
	}
	return 0
}

type ChatIpChannelVisit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress"`
	ChannelId int64  `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId"`
	IpCount   int64  `protobuf:"varint,3,opt,name=IpCount,proto3" json:"IpCount"`
	InDbDate  string `protobuf:"bytes,4,opt,name=InDbDate,proto3" json:"InDbDate"`
	InDbTime  string `protobuf:"bytes,5,opt,name=InDbTime,proto3" json:"InDbTime"`
	IpMemo    string `protobuf:"bytes,6,opt,name=IpMemo,proto3" json:"IpMemo"`
}

func (x *ChatIpChannelVisit) Reset() {
	*x = ChatIpChannelVisit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatIpChannelVisit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatIpChannelVisit) ProtoMessage() {}

func (x *ChatIpChannelVisit) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatIpChannelVisit.ProtoReflect.Descriptor instead.
func (*ChatIpChannelVisit) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{6}
}

func (x *ChatIpChannelVisit) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ChatIpChannelVisit) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChatIpChannelVisit) GetIpCount() int64 {
	if x != nil {
		return x.IpCount
	}
	return 0
}

func (x *ChatIpChannelVisit) GetInDbDate() string {
	if x != nil {
		return x.InDbDate
	}
	return ""
}

func (x *ChatIpChannelVisit) GetInDbTime() string {
	if x != nil {
		return x.InDbTime
	}
	return ""
}

func (x *ChatIpChannelVisit) GetIpMemo() string {
	if x != nil {
		return x.IpMemo
	}
	return ""
}

type ChatSessionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId      int64  `protobuf:"varint,1,opt,name=EventId,proto3" json:"EventId"`
	SessionId    int64  `protobuf:"varint,2,opt,name=SessionId,proto3" json:"SessionId"`
	EventDate    string `protobuf:"bytes,3,opt,name=EventDate,proto3" json:"EventDate"`
	EventTime    string `protobuf:"bytes,4,opt,name=EventTime,proto3" json:"EventTime"`
	EventContent string `protobuf:"bytes,5,opt,name=EventContent,proto3" json:"EventContent"`
}

func (x *ChatSessionEvent) Reset() {
	*x = ChatSessionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSessionEvent) ProtoMessage() {}

func (x *ChatSessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSessionEvent.ProtoReflect.Descriptor instead.
func (*ChatSessionEvent) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{7}
}

func (x *ChatSessionEvent) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *ChatSessionEvent) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ChatSessionEvent) GetEventDate() string {
	if x != nil {
		return x.EventDate
	}
	return ""
}

func (x *ChatSessionEvent) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *ChatSessionEvent) GetEventContent() string {
	if x != nil {
		return x.EventContent
	}
	return ""
}

type ChatWechatOutImportOper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImportId        int64  `protobuf:"varint,1,opt,name=ImportId,proto3" json:"ImportId"`
	MarkKey         string `protobuf:"bytes,2,opt,name=MarkKey,proto3" json:"MarkKey"`
	WechatName      string `protobuf:"bytes,3,opt,name=WechatName,proto3" json:"WechatName"`
	WechatAvatarUrl string `protobuf:"bytes,4,opt,name=WechatAvatarUrl,proto3" json:"WechatAvatarUrl"`
	UpdateDate      string `protobuf:"bytes,5,opt,name=UpdateDate,proto3" json:"UpdateDate"`
	UpdateTime      string `protobuf:"bytes,6,opt,name=UpdateTime,proto3" json:"UpdateTime"`
	OperSeq         int64  `protobuf:"varint,7,opt,name=OperSeq,proto3" json:"OperSeq"`
	OperMark        int32  `protobuf:"varint,8,opt,name=OperMark,proto3" json:"OperMark"`
}

func (x *ChatWechatOutImportOper) Reset() {
	*x = ChatWechatOutImportOper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatWechatOutImportOper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatWechatOutImportOper) ProtoMessage() {}

func (x *ChatWechatOutImportOper) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatWechatOutImportOper.ProtoReflect.Descriptor instead.
func (*ChatWechatOutImportOper) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{8}
}

func (x *ChatWechatOutImportOper) GetImportId() int64 {
	if x != nil {
		return x.ImportId
	}
	return 0
}

func (x *ChatWechatOutImportOper) GetMarkKey() string {
	if x != nil {
		return x.MarkKey
	}
	return ""
}

func (x *ChatWechatOutImportOper) GetWechatName() string {
	if x != nil {
		return x.WechatName
	}
	return ""
}

func (x *ChatWechatOutImportOper) GetWechatAvatarUrl() string {
	if x != nil {
		return x.WechatAvatarUrl
	}
	return ""
}

func (x *ChatWechatOutImportOper) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *ChatWechatOutImportOper) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ChatWechatOutImportOper) GetOperSeq() int64 {
	if x != nil {
		return x.OperSeq
	}
	return 0
}

func (x *ChatWechatOutImportOper) GetOperMark() int32 {
	if x != nil {
		return x.OperMark
	}
	return 0
}

type K8HashUserShareWalletFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowId       int64  `protobuf:"varint,1,opt,name=FlowId,proto3" json:"FlowId"`
	UserId       int64  `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId"`
	CurrencyCode string `protobuf:"bytes,3,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	TradeQuota   string `protobuf:"bytes,4,opt,name=TradeQuota,proto3" json:"TradeQuota"`
	AfterBalance string `protobuf:"bytes,5,opt,name=AfterBalance,proto3" json:"AfterBalance"`
	TradeTxId    string `protobuf:"bytes,6,opt,name=TradeTxId,proto3" json:"TradeTxId"`
	TradeCode    int32  `protobuf:"varint,7,opt,name=TradeCode,proto3" json:"TradeCode"`
	TradeMemo    string `protobuf:"bytes,8,opt,name=TradeMemo,proto3" json:"TradeMemo"`
	TradeDate    string `protobuf:"bytes,9,opt,name=TradeDate,proto3" json:"TradeDate"`
	TradeTime    string `protobuf:"bytes,10,opt,name=TradeTime,proto3" json:"TradeTime"`
	FlowStatus   int32  `protobuf:"varint,11,opt,name=FlowStatus,proto3" json:"FlowStatus"`
	StrategyType int32  `protobuf:"varint,12,opt,name=StrategyType,proto3" json:"StrategyType"`
}

func (x *K8HashUserShareWalletFlow) Reset() {
	*x = K8HashUserShareWalletFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashUserShareWalletFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashUserShareWalletFlow) ProtoMessage() {}

func (x *K8HashUserShareWalletFlow) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashUserShareWalletFlow.ProtoReflect.Descriptor instead.
func (*K8HashUserShareWalletFlow) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{9}
}

func (x *K8HashUserShareWalletFlow) GetFlowId() int64 {
	if x != nil {
		return x.FlowId
	}
	return 0
}

func (x *K8HashUserShareWalletFlow) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *K8HashUserShareWalletFlow) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashUserShareWalletFlow) GetTradeQuota() string {
	if x != nil {
		return x.TradeQuota
	}
	return ""
}

func (x *K8HashUserShareWalletFlow) GetAfterBalance() string {
	if x != nil {
		return x.AfterBalance
	}
	return ""
}

func (x *K8HashUserShareWalletFlow) GetTradeTxId() string {
	if x != nil {
		return x.TradeTxId
	}
	return ""
}

func (x *K8HashUserShareWalletFlow) GetTradeCode() int32 {
	if x != nil {
		return x.TradeCode
	}
	return 0
}

func (x *K8HashUserShareWalletFlow) GetTradeMemo() string {
	if x != nil {
		return x.TradeMemo
	}
	return ""
}

func (x *K8HashUserShareWalletFlow) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *K8HashUserShareWalletFlow) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *K8HashUserShareWalletFlow) GetFlowStatus() int32 {
	if x != nil {
		return x.FlowStatus
	}
	return 0
}

func (x *K8HashUserShareWalletFlow) GetStrategyType() int32 {
	if x != nil {
		return x.StrategyType
	}
	return 0
}

type ChatSessionMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId        int64  `protobuf:"varint,1,opt,name=MsgId,proto3" json:"MsgId"`
	SessionId    int64  `protobuf:"varint,2,opt,name=SessionId,proto3" json:"SessionId"`
	MsgType      int32  `protobuf:"varint,3,opt,name=MsgType,proto3" json:"MsgType"` // 1：文本，2：图片，3：语音，4：视频，5：撤回
	MsgContent   string `protobuf:"bytes,4,opt,name=MsgContent,proto3" json:"MsgContent"`
	SendUserId   string `protobuf:"bytes,5,opt,name=SendUserId,proto3" json:"SendUserId"`
	SendUserName string `protobuf:"bytes,6,opt,name=SendUserName,proto3" json:"SendUserName"`
	SendUserIcon string `protobuf:"bytes,7,opt,name=SendUserIcon,proto3" json:"SendUserIcon"`
	SendDate     string `protobuf:"bytes,8,opt,name=SendDate,proto3" json:"SendDate"`
	SendTime     string `protobuf:"bytes,9,opt,name=SendTime,proto3" json:"SendTime"`
	SendUserType int32  `protobuf:"varint,10,opt,name=SendUserType,proto3" json:"SendUserType"` // 1：客服，2：用户
	Readed       int32  `protobuf:"varint,11,opt,name=Readed,proto3" json:"Readed"`
	SendIpInfo   string `protobuf:"bytes,12,opt,name=SendIpInfo,proto3" json:"SendIpInfo"`
}

func (x *ChatSessionMsg) Reset() {
	*x = ChatSessionMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSessionMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSessionMsg) ProtoMessage() {}

func (x *ChatSessionMsg) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSessionMsg.ProtoReflect.Descriptor instead.
func (*ChatSessionMsg) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{10}
}

func (x *ChatSessionMsg) GetMsgId() int64 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

func (x *ChatSessionMsg) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ChatSessionMsg) GetMsgType() int32 {
	if x != nil {
		return x.MsgType
	}
	return 0
}

func (x *ChatSessionMsg) GetMsgContent() string {
	if x != nil {
		return x.MsgContent
	}
	return ""
}

func (x *ChatSessionMsg) GetSendUserId() string {
	if x != nil {
		return x.SendUserId
	}
	return ""
}

func (x *ChatSessionMsg) GetSendUserName() string {
	if x != nil {
		return x.SendUserName
	}
	return ""
}

func (x *ChatSessionMsg) GetSendUserIcon() string {
	if x != nil {
		return x.SendUserIcon
	}
	return ""
}

func (x *ChatSessionMsg) GetSendDate() string {
	if x != nil {
		return x.SendDate
	}
	return ""
}

func (x *ChatSessionMsg) GetSendTime() string {
	if x != nil {
		return x.SendTime
	}
	return ""
}

func (x *ChatSessionMsg) GetSendUserType() int32 {
	if x != nil {
		return x.SendUserType
	}
	return 0
}

func (x *ChatSessionMsg) GetReaded() int32 {
	if x != nil {
		return x.Readed
	}
	return 0
}

func (x *ChatSessionMsg) GetSendIpInfo() string {
	if x != nil {
		return x.SendIpInfo
	}
	return ""
}

type K8HashBcRecharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId                          string `protobuf:"bytes,1,opt,name=TxId,proto3" json:"TxId"`
	TxHash                        string `protobuf:"bytes,2,opt,name=TxHash,proto3" json:"TxHash"`
	UserRechargeToPlatformAddress string `protobuf:"bytes,3,opt,name=UserRechargeToPlatformAddress,proto3" json:"UserRechargeToPlatformAddress"`
	SrcUserAddress                string `protobuf:"bytes,4,opt,name=SrcUserAddress,proto3" json:"SrcUserAddress"`
	SrcUserQuota                  string `protobuf:"bytes,5,opt,name=SrcUserQuota,proto3" json:"SrcUserQuota"`
	SrcUserId                     int64  `protobuf:"varint,6,opt,name=SrcUserId,proto3" json:"SrcUserId"`
	CurrencyCode                  string `protobuf:"bytes,7,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	Confirms                      int32  `protobuf:"varint,8,opt,name=Confirms,proto3" json:"Confirms"`
	TradeDate                     string `protobuf:"bytes,9,opt,name=TradeDate,proto3" json:"TradeDate"`
	TradeTime                     string `protobuf:"bytes,10,opt,name=TradeTime,proto3" json:"TradeTime"`
	StrategyType                  int32  `protobuf:"varint,11,opt,name=StrategyType,proto3" json:"StrategyType"`
	WinOk                         int32  `protobuf:"varint,12,opt,name=WinOk,proto3" json:"WinOk"`
	WinMemo                       string `protobuf:"bytes,13,opt,name=WinMemo,proto3" json:"WinMemo"`
	RechargeFlowId                int64  `protobuf:"varint,14,opt,name=RechargeFlowId,proto3" json:"RechargeFlowId"`
}

func (x *K8HashBcRecharge) Reset() {
	*x = K8HashBcRecharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashBcRecharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashBcRecharge) ProtoMessage() {}

func (x *K8HashBcRecharge) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashBcRecharge.ProtoReflect.Descriptor instead.
func (*K8HashBcRecharge) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{11}
}

func (x *K8HashBcRecharge) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *K8HashBcRecharge) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *K8HashBcRecharge) GetUserRechargeToPlatformAddress() string {
	if x != nil {
		return x.UserRechargeToPlatformAddress
	}
	return ""
}

func (x *K8HashBcRecharge) GetSrcUserAddress() string {
	if x != nil {
		return x.SrcUserAddress
	}
	return ""
}

func (x *K8HashBcRecharge) GetSrcUserQuota() string {
	if x != nil {
		return x.SrcUserQuota
	}
	return ""
}

func (x *K8HashBcRecharge) GetSrcUserId() int64 {
	if x != nil {
		return x.SrcUserId
	}
	return 0
}

func (x *K8HashBcRecharge) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashBcRecharge) GetConfirms() int32 {
	if x != nil {
		return x.Confirms
	}
	return 0
}

func (x *K8HashBcRecharge) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *K8HashBcRecharge) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *K8HashBcRecharge) GetStrategyType() int32 {
	if x != nil {
		return x.StrategyType
	}
	return 0
}

func (x *K8HashBcRecharge) GetWinOk() int32 {
	if x != nil {
		return x.WinOk
	}
	return 0
}

func (x *K8HashBcRecharge) GetWinMemo() string {
	if x != nil {
		return x.WinMemo
	}
	return ""
}

func (x *K8HashBcRecharge) GetRechargeFlowId() int64 {
	if x != nil {
		return x.RechargeFlowId
	}
	return 0
}

type K8HashGame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId             int32  `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId"`
	CurrencyCode       string `protobuf:"bytes,2,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	GameName           string `protobuf:"bytes,3,opt,name=GameName,proto3" json:"GameName"`
	BetFrom            int32  `protobuf:"varint,4,opt,name=BetFrom,proto3" json:"BetFrom"`
	BetTo              int32  `protobuf:"varint,5,opt,name=BetTo,proto3" json:"BetTo"`
	ServiceChargeRate  string `protobuf:"bytes,6,opt,name=ServiceChargeRate,proto3" json:"ServiceChargeRate"`
	CashRebateRate     string `protobuf:"bytes,7,opt,name=CashRebateRate,proto3" json:"CashRebateRate"`
	CommissionTopRate1 string `protobuf:"bytes,8,opt,name=CommissionTopRate1,proto3" json:"CommissionTopRate1"`
	CommissionTopRate2 string `protobuf:"bytes,9,opt,name=CommissionTopRate2,proto3" json:"CommissionTopRate2"`
	QuotaLimit         string `protobuf:"bytes,10,opt,name=QuotaLimit,proto3" json:"QuotaLimit"`
	ToWalletAddress    string `protobuf:"bytes,11,opt,name=ToWalletAddress,proto3" json:"ToWalletAddress"`
	GameEnabled        int32  `protobuf:"varint,12,opt,name=GameEnabled,proto3" json:"GameEnabled"`
}

func (x *K8HashGame) Reset() {
	*x = K8HashGame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashGame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashGame) ProtoMessage() {}

func (x *K8HashGame) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashGame.ProtoReflect.Descriptor instead.
func (*K8HashGame) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{12}
}

func (x *K8HashGame) GetGameId() int32 {
	if x != nil {
		return x.GameId
	}
	return 0
}

func (x *K8HashGame) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashGame) GetGameName() string {
	if x != nil {
		return x.GameName
	}
	return ""
}

func (x *K8HashGame) GetBetFrom() int32 {
	if x != nil {
		return x.BetFrom
	}
	return 0
}

func (x *K8HashGame) GetBetTo() int32 {
	if x != nil {
		return x.BetTo
	}
	return 0
}

func (x *K8HashGame) GetServiceChargeRate() string {
	if x != nil {
		return x.ServiceChargeRate
	}
	return ""
}

func (x *K8HashGame) GetCashRebateRate() string {
	if x != nil {
		return x.CashRebateRate
	}
	return ""
}

func (x *K8HashGame) GetCommissionTopRate1() string {
	if x != nil {
		return x.CommissionTopRate1
	}
	return ""
}

func (x *K8HashGame) GetCommissionTopRate2() string {
	if x != nil {
		return x.CommissionTopRate2
	}
	return ""
}

func (x *K8HashGame) GetQuotaLimit() string {
	if x != nil {
		return x.QuotaLimit
	}
	return ""
}

func (x *K8HashGame) GetToWalletAddress() string {
	if x != nil {
		return x.ToWalletAddress
	}
	return ""
}

func (x *K8HashGame) GetGameEnabled() int32 {
	if x != nil {
		return x.GameEnabled
	}
	return 0
}

type ChatIpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress    string `protobuf:"bytes,1,opt,name=IpAddress,proto3" json:"IpAddress"`
	IpPrefix     string `protobuf:"bytes,2,opt,name=IpPrefix,proto3" json:"IpPrefix"`
	IpArea       string `protobuf:"bytes,3,opt,name=IpArea,proto3" json:"IpArea"`
	IpType       int32  `protobuf:"varint,4,opt,name=IpType,proto3" json:"IpType"` // 1：黑
	IpMemo       string `protobuf:"bytes,5,opt,name=IpMemo,proto3" json:"IpMemo"`
	InDbDate     string `protobuf:"bytes,6,opt,name=InDbDate,proto3" json:"InDbDate"`
	InDbTime     string `protobuf:"bytes,7,opt,name=InDbTime,proto3" json:"InDbTime"`
	IpAreaField0 string `protobuf:"bytes,8,opt,name=IpAreaField0,proto3" json:"IpAreaField0"`
	IpAreaField1 string `protobuf:"bytes,9,opt,name=IpAreaField1,proto3" json:"IpAreaField1"`
	IpAreaField2 string `protobuf:"bytes,10,opt,name=IpAreaField2,proto3" json:"IpAreaField2"`
	IpAreaField3 string `protobuf:"bytes,11,opt,name=IpAreaField3,proto3" json:"IpAreaField3"`
	IpAreaField4 string `protobuf:"bytes,12,opt,name=IpAreaField4,proto3" json:"IpAreaField4"`
	IpChannelId  int64  `protobuf:"varint,13,opt,name=IpChannelId,proto3" json:"IpChannelId"`
	IpCount      int64  `protobuf:"varint,14,opt,name=IpCount,proto3" json:"IpCount"`
}

func (x *ChatIpInfo) Reset() {
	*x = ChatIpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatIpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatIpInfo) ProtoMessage() {}

func (x *ChatIpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatIpInfo.ProtoReflect.Descriptor instead.
func (*ChatIpInfo) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{13}
}

func (x *ChatIpInfo) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ChatIpInfo) GetIpPrefix() string {
	if x != nil {
		return x.IpPrefix
	}
	return ""
}

func (x *ChatIpInfo) GetIpArea() string {
	if x != nil {
		return x.IpArea
	}
	return ""
}

func (x *ChatIpInfo) GetIpType() int32 {
	if x != nil {
		return x.IpType
	}
	return 0
}

func (x *ChatIpInfo) GetIpMemo() string {
	if x != nil {
		return x.IpMemo
	}
	return ""
}

func (x *ChatIpInfo) GetInDbDate() string {
	if x != nil {
		return x.InDbDate
	}
	return ""
}

func (x *ChatIpInfo) GetInDbTime() string {
	if x != nil {
		return x.InDbTime
	}
	return ""
}

func (x *ChatIpInfo) GetIpAreaField0() string {
	if x != nil {
		return x.IpAreaField0
	}
	return ""
}

func (x *ChatIpInfo) GetIpAreaField1() string {
	if x != nil {
		return x.IpAreaField1
	}
	return ""
}

func (x *ChatIpInfo) GetIpAreaField2() string {
	if x != nil {
		return x.IpAreaField2
	}
	return ""
}

func (x *ChatIpInfo) GetIpAreaField3() string {
	if x != nil {
		return x.IpAreaField3
	}
	return ""
}

func (x *ChatIpInfo) GetIpAreaField4() string {
	if x != nil {
		return x.IpAreaField4
	}
	return ""
}

func (x *ChatIpInfo) GetIpChannelId() int64 {
	if x != nil {
		return x.IpChannelId
	}
	return 0
}

func (x *ChatIpInfo) GetIpCount() int64 {
	if x != nil {
		return x.IpCount
	}
	return 0
}

type ChatMiniproChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProChannelId               int64  `protobuf:"varint,1,opt,name=ProChannelId,proto3" json:"ProChannelId"`
	ProChannelName             string `protobuf:"bytes,2,opt,name=ProChannelName,proto3" json:"ProChannelName"`
	ProId                      int64  `protobuf:"varint,3,opt,name=ProId,proto3" json:"ProId"`
	ProChannelDesc             string `protobuf:"bytes,4,opt,name=ProChannelDesc,proto3" json:"ProChannelDesc"`
	ProChannelIcon             string `protobuf:"bytes,5,opt,name=ProChannelIcon,proto3" json:"ProChannelIcon"`
	ProChannelContentUrl       string `protobuf:"bytes,6,opt,name=ProChannelContentUrl,proto3" json:"ProChannelContentUrl"`
	ProChannelContentText      string `protobuf:"bytes,7,opt,name=ProChannelContentText,proto3" json:"ProChannelContentText"`
	ProChannelSpreadUrl        string `protobuf:"bytes,8,opt,name=ProChannelSpreadUrl,proto3" json:"ProChannelSpreadUrl"`
	ProChannelAuthImageUrl     string `protobuf:"bytes,9,opt,name=ProChannelAuthImageUrl,proto3" json:"ProChannelAuthImageUrl"`
	ProChannelPosterImageUrl   string `protobuf:"bytes,10,opt,name=ProChannelPosterImageUrl,proto3" json:"ProChannelPosterImageUrl"`
	ProChannelJumpMiniproAppId string `protobuf:"bytes,11,opt,name=ProChannelJumpMiniproAppId,proto3" json:"ProChannelJumpMiniproAppId"`
	ProChannelEnabled          int32  `protobuf:"varint,12,opt,name=ProChannelEnabled,proto3" json:"ProChannelEnabled"`
	ProChannelUnderReview      int32  `protobuf:"varint,13,opt,name=ProChannelUnderReview,proto3" json:"ProChannelUnderReview"`
	ProChannelOkGoType         int32  `protobuf:"varint,14,opt,name=ProChannelOkGoType,proto3" json:"ProChannelOkGoType"`
	ProChannelOkGoUrl          string `protobuf:"bytes,15,opt,name=ProChannelOkGoUrl,proto3" json:"ProChannelOkGoUrl"`
	ProChannelMatchType        int32  `protobuf:"varint,16,opt,name=ProChannelMatchType,proto3" json:"ProChannelMatchType"`
}

func (x *ChatMiniproChannel) Reset() {
	*x = ChatMiniproChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMiniproChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMiniproChannel) ProtoMessage() {}

func (x *ChatMiniproChannel) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMiniproChannel.ProtoReflect.Descriptor instead.
func (*ChatMiniproChannel) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{14}
}

func (x *ChatMiniproChannel) GetProChannelId() int64 {
	if x != nil {
		return x.ProChannelId
	}
	return 0
}

func (x *ChatMiniproChannel) GetProChannelName() string {
	if x != nil {
		return x.ProChannelName
	}
	return ""
}

func (x *ChatMiniproChannel) GetProId() int64 {
	if x != nil {
		return x.ProId
	}
	return 0
}

func (x *ChatMiniproChannel) GetProChannelDesc() string {
	if x != nil {
		return x.ProChannelDesc
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelIcon() string {
	if x != nil {
		return x.ProChannelIcon
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelContentUrl() string {
	if x != nil {
		return x.ProChannelContentUrl
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelContentText() string {
	if x != nil {
		return x.ProChannelContentText
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelSpreadUrl() string {
	if x != nil {
		return x.ProChannelSpreadUrl
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelAuthImageUrl() string {
	if x != nil {
		return x.ProChannelAuthImageUrl
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelPosterImageUrl() string {
	if x != nil {
		return x.ProChannelPosterImageUrl
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelJumpMiniproAppId() string {
	if x != nil {
		return x.ProChannelJumpMiniproAppId
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelEnabled() int32 {
	if x != nil {
		return x.ProChannelEnabled
	}
	return 0
}

func (x *ChatMiniproChannel) GetProChannelUnderReview() int32 {
	if x != nil {
		return x.ProChannelUnderReview
	}
	return 0
}

func (x *ChatMiniproChannel) GetProChannelOkGoType() int32 {
	if x != nil {
		return x.ProChannelOkGoType
	}
	return 0
}

func (x *ChatMiniproChannel) GetProChannelOkGoUrl() string {
	if x != nil {
		return x.ProChannelOkGoUrl
	}
	return ""
}

func (x *ChatMiniproChannel) GetProChannelMatchType() int32 {
	if x != nil {
		return x.ProChannelMatchType
	}
	return 0
}

type ChatWechatMatchRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WechatCk       string `protobuf:"bytes,1,opt,name=WechatCk,proto3" json:"WechatCk"`
	ChannelId      int64  `protobuf:"varint,2,opt,name=ChannelId,proto3" json:"ChannelId"`
	WechatUserName string `protobuf:"bytes,3,opt,name=WechatUserName,proto3" json:"WechatUserName"`
	WechatUserIcon string `protobuf:"bytes,4,opt,name=WechatUserIcon,proto3" json:"WechatUserIcon"`
	MatchOk        int32  `protobuf:"varint,5,opt,name=MatchOk,proto3" json:"MatchOk"`
	MatchImportId  int64  `protobuf:"varint,6,opt,name=MatchImportId,proto3" json:"MatchImportId"`
	MatchUserName  string `protobuf:"bytes,7,opt,name=MatchUserName,proto3" json:"MatchUserName"`
	MatchUserIcon  string `protobuf:"bytes,8,opt,name=MatchUserIcon,proto3" json:"MatchUserIcon"`
	MatchDate      string `protobuf:"bytes,9,opt,name=MatchDate,proto3" json:"MatchDate"`
	MatchTime      string `protobuf:"bytes,10,opt,name=MatchTime,proto3" json:"MatchTime"`
	MatchCount     int32  `protobuf:"varint,11,opt,name=MatchCount,proto3" json:"MatchCount"`
	Memo           string `protobuf:"bytes,12,opt,name=Memo,proto3" json:"Memo"`
}

func (x *ChatWechatMatchRecord) Reset() {
	*x = ChatWechatMatchRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatWechatMatchRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatWechatMatchRecord) ProtoMessage() {}

func (x *ChatWechatMatchRecord) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatWechatMatchRecord.ProtoReflect.Descriptor instead.
func (*ChatWechatMatchRecord) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{15}
}

func (x *ChatWechatMatchRecord) GetWechatCk() string {
	if x != nil {
		return x.WechatCk
	}
	return ""
}

func (x *ChatWechatMatchRecord) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChatWechatMatchRecord) GetWechatUserName() string {
	if x != nil {
		return x.WechatUserName
	}
	return ""
}

func (x *ChatWechatMatchRecord) GetWechatUserIcon() string {
	if x != nil {
		return x.WechatUserIcon
	}
	return ""
}

func (x *ChatWechatMatchRecord) GetMatchOk() int32 {
	if x != nil {
		return x.MatchOk
	}
	return 0
}

func (x *ChatWechatMatchRecord) GetMatchImportId() int64 {
	if x != nil {
		return x.MatchImportId
	}
	return 0
}

func (x *ChatWechatMatchRecord) GetMatchUserName() string {
	if x != nil {
		return x.MatchUserName
	}
	return ""
}

func (x *ChatWechatMatchRecord) GetMatchUserIcon() string {
	if x != nil {
		return x.MatchUserIcon
	}
	return ""
}

func (x *ChatWechatMatchRecord) GetMatchDate() string {
	if x != nil {
		return x.MatchDate
	}
	return ""
}

func (x *ChatWechatMatchRecord) GetMatchTime() string {
	if x != nil {
		return x.MatchTime
	}
	return ""
}

func (x *ChatWechatMatchRecord) GetMatchCount() int32 {
	if x != nil {
		return x.MatchCount
	}
	return 0
}

func (x *ChatWechatMatchRecord) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type K8HashUserShareWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            int64  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId"`
	CurrencyCode      string `protobuf:"bytes,2,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	CurrencyBalance   string `protobuf:"bytes,3,opt,name=CurrencyBalance,proto3" json:"CurrencyBalance"`
	SettledAmount     string `protobuf:"bytes,4,opt,name=SettledAmount,proto3" json:"SettledAmount"`
	CurrencyEnabled   int32  `protobuf:"varint,5,opt,name=CurrencyEnabled,proto3" json:"CurrencyEnabled"`
	WithdrawalAddress string `protobuf:"bytes,6,opt,name=WithdrawalAddress,proto3" json:"WithdrawalAddress"`
}

func (x *K8HashUserShareWallet) Reset() {
	*x = K8HashUserShareWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashUserShareWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashUserShareWallet) ProtoMessage() {}

func (x *K8HashUserShareWallet) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashUserShareWallet.ProtoReflect.Descriptor instead.
func (*K8HashUserShareWallet) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{16}
}

func (x *K8HashUserShareWallet) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *K8HashUserShareWallet) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashUserShareWallet) GetCurrencyBalance() string {
	if x != nil {
		return x.CurrencyBalance
	}
	return ""
}

func (x *K8HashUserShareWallet) GetSettledAmount() string {
	if x != nil {
		return x.SettledAmount
	}
	return ""
}

func (x *K8HashUserShareWallet) GetCurrencyEnabled() int32 {
	if x != nil {
		return x.CurrencyEnabled
	}
	return 0
}

func (x *K8HashUserShareWallet) GetWithdrawalAddress() string {
	if x != nil {
		return x.WithdrawalAddress
	}
	return ""
}

type SysBaseKeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseKey      string `protobuf:"bytes,1,opt,name=BaseKey,proto3" json:"BaseKey"`
	BaseKeyValue string `protobuf:"bytes,2,opt,name=BaseKeyValue,proto3" json:"BaseKeyValue"`
	BaseMemo     string `protobuf:"bytes,3,opt,name=BaseMemo,proto3" json:"BaseMemo"`
}

func (x *SysBaseKeyValue) Reset() {
	*x = SysBaseKeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysBaseKeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysBaseKeyValue) ProtoMessage() {}

func (x *SysBaseKeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysBaseKeyValue.ProtoReflect.Descriptor instead.
func (*SysBaseKeyValue) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{17}
}

func (x *SysBaseKeyValue) GetBaseKey() string {
	if x != nil {
		return x.BaseKey
	}
	return ""
}

func (x *SysBaseKeyValue) GetBaseKeyValue() string {
	if x != nil {
		return x.BaseKeyValue
	}
	return ""
}

func (x *SysBaseKeyValue) GetBaseMemo() string {
	if x != nil {
		return x.BaseMemo
	}
	return ""
}

type SysBaseOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId   int64  `protobuf:"varint,1,opt,name=OperatorId,proto3" json:"OperatorId"`
	OperatorName string `protobuf:"bytes,2,opt,name=OperatorName,proto3" json:"OperatorName"` // 操作员名称
	LoginName    string `protobuf:"bytes,3,opt,name=LoginName,proto3" json:"LoginName"`
	Pswd         string `protobuf:"bytes,4,opt,name=Pswd,proto3" json:"Pswd"`
	Status       int32  `protobuf:"varint,5,opt,name=Status,proto3" json:"Status"`
	OfflineKey   string `protobuf:"bytes,6,opt,name=OfflineKey,proto3" json:"OfflineKey"`
}

func (x *SysBaseOperator) Reset() {
	*x = SysBaseOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysBaseOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysBaseOperator) ProtoMessage() {}

func (x *SysBaseOperator) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysBaseOperator.ProtoReflect.Descriptor instead.
func (*SysBaseOperator) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{18}
}

func (x *SysBaseOperator) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *SysBaseOperator) GetOperatorName() string {
	if x != nil {
		return x.OperatorName
	}
	return ""
}

func (x *SysBaseOperator) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *SysBaseOperator) GetPswd() string {
	if x != nil {
		return x.Pswd
	}
	return ""
}

func (x *SysBaseOperator) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SysBaseOperator) GetOfflineKey() string {
	if x != nil {
		return x.OfflineKey
	}
	return ""
}

type ChatChannelWelcomeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WelcomeId    int64  `protobuf:"varint,1,opt,name=WelcomeId,proto3" json:"WelcomeId"`
	ProChannelId int64  `protobuf:"varint,2,opt,name=ProChannelId,proto3" json:"ProChannelId"`
	WelcomeText  string `protobuf:"bytes,3,opt,name=WelcomeText,proto3" json:"WelcomeText"`
	WelcomeType  int32  `protobuf:"varint,4,opt,name=WelcomeType,proto3" json:"WelcomeType"`
	OrderNo      int32  `protobuf:"varint,5,opt,name=OrderNo,proto3" json:"OrderNo"`
}

func (x *ChatChannelWelcomeMsg) Reset() {
	*x = ChatChannelWelcomeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatChannelWelcomeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatChannelWelcomeMsg) ProtoMessage() {}

func (x *ChatChannelWelcomeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatChannelWelcomeMsg.ProtoReflect.Descriptor instead.
func (*ChatChannelWelcomeMsg) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{19}
}

func (x *ChatChannelWelcomeMsg) GetWelcomeId() int64 {
	if x != nil {
		return x.WelcomeId
	}
	return 0
}

func (x *ChatChannelWelcomeMsg) GetProChannelId() int64 {
	if x != nil {
		return x.ProChannelId
	}
	return 0
}

func (x *ChatChannelWelcomeMsg) GetWelcomeText() string {
	if x != nil {
		return x.WelcomeText
	}
	return ""
}

func (x *ChatChannelWelcomeMsg) GetWelcomeType() int32 {
	if x != nil {
		return x.WelcomeType
	}
	return 0
}

func (x *ChatChannelWelcomeMsg) GetOrderNo() int32 {
	if x != nil {
		return x.OrderNo
	}
	return 0
}

type ChatSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId      int64  `protobuf:"varint,1,opt,name=SessionId,proto3" json:"SessionId"`
	ProChannelId   int64  `protobuf:"varint,2,opt,name=ProChannelId,proto3" json:"ProChannelId"`
	ProChannelName string `protobuf:"bytes,3,opt,name=ProChannelName,proto3" json:"ProChannelName"`
	ImportId       int64  `protobuf:"varint,4,opt,name=ImportId,proto3" json:"ImportId"`
	UserName       string `protobuf:"bytes,5,opt,name=UserName,proto3" json:"UserName"`
	UserIcon       string `protobuf:"bytes,6,opt,name=UserIcon,proto3" json:"UserIcon"`
	UserOnline     int32  `protobuf:"varint,7,opt,name=UserOnline,proto3" json:"UserOnline"`
	UserOnlineTime int64  `protobuf:"varint,8,opt,name=UserOnlineTime,proto3" json:"UserOnlineTime"`
	LastMsg        string `protobuf:"bytes,9,opt,name=LastMsg,proto3" json:"LastMsg"`
	LastSendTime   int64  `protobuf:"varint,10,opt,name=LastSendTime,proto3" json:"LastSendTime"`
	UnreadCount    int32  `protobuf:"varint,11,opt,name=UnreadCount,proto3" json:"UnreadCount"`
	AgentId        int64  `protobuf:"varint,12,opt,name=AgentId,proto3" json:"AgentId"`
	UserId         string `protobuf:"bytes,13,opt,name=UserId,proto3" json:"UserId"`
	UserSex        string `protobuf:"bytes,14,opt,name=UserSex,proto3" json:"UserSex"`
	UserProvince   string `protobuf:"bytes,15,opt,name=UserProvince,proto3" json:"UserProvince"`
	UserCity       string `protobuf:"bytes,16,opt,name=UserCity,proto3" json:"UserCity"`
	UserCountry    string `protobuf:"bytes,17,opt,name=UserCountry,proto3" json:"UserCountry"`
	UserIp         string `protobuf:"bytes,18,opt,name=UserIp,proto3" json:"UserIp"`
	UserCk         string `protobuf:"bytes,19,opt,name=UserCk,proto3" json:"UserCk"`
}

func (x *ChatSession) Reset() {
	*x = ChatSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatSession) ProtoMessage() {}

func (x *ChatSession) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatSession.ProtoReflect.Descriptor instead.
func (*ChatSession) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{20}
}

func (x *ChatSession) GetSessionId() int64 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *ChatSession) GetProChannelId() int64 {
	if x != nil {
		return x.ProChannelId
	}
	return 0
}

func (x *ChatSession) GetProChannelName() string {
	if x != nil {
		return x.ProChannelName
	}
	return ""
}

func (x *ChatSession) GetImportId() int64 {
	if x != nil {
		return x.ImportId
	}
	return 0
}

func (x *ChatSession) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ChatSession) GetUserIcon() string {
	if x != nil {
		return x.UserIcon
	}
	return ""
}

func (x *ChatSession) GetUserOnline() int32 {
	if x != nil {
		return x.UserOnline
	}
	return 0
}

func (x *ChatSession) GetUserOnlineTime() int64 {
	if x != nil {
		return x.UserOnlineTime
	}
	return 0
}

func (x *ChatSession) GetLastMsg() string {
	if x != nil {
		return x.LastMsg
	}
	return ""
}

func (x *ChatSession) GetLastSendTime() int64 {
	if x != nil {
		return x.LastSendTime
	}
	return 0
}

func (x *ChatSession) GetUnreadCount() int32 {
	if x != nil {
		return x.UnreadCount
	}
	return 0
}

func (x *ChatSession) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *ChatSession) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChatSession) GetUserSex() string {
	if x != nil {
		return x.UserSex
	}
	return ""
}

func (x *ChatSession) GetUserProvince() string {
	if x != nil {
		return x.UserProvince
	}
	return ""
}

func (x *ChatSession) GetUserCity() string {
	if x != nil {
		return x.UserCity
	}
	return ""
}

func (x *ChatSession) GetUserCountry() string {
	if x != nil {
		return x.UserCountry
	}
	return ""
}

func (x *ChatSession) GetUserIp() string {
	if x != nil {
		return x.UserIp
	}
	return ""
}

func (x *ChatSession) GetUserCk() string {
	if x != nil {
		return x.UserCk
	}
	return ""
}

type ChatChannelNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoticeId           int64  `protobuf:"varint,1,opt,name=NoticeId,proto3" json:"NoticeId"`
	ProChannelId       int64  `protobuf:"varint,2,opt,name=ProChannelId,proto3" json:"ProChannelId"`
	NoticeTitle        string `protobuf:"bytes,3,opt,name=NoticeTitle,proto3" json:"NoticeTitle"`
	NoticeContentUrl   string `protobuf:"bytes,4,opt,name=NoticeContentUrl,proto3" json:"NoticeContentUrl"`
	NoticeContentText  string `protobuf:"bytes,5,opt,name=NoticeContentText,proto3" json:"NoticeContentText"`
	NoticeOrderNo      int32  `protobuf:"varint,6,opt,name=NoticeOrderNo,proto3" json:"NoticeOrderNo"`
	NoticeGroup        string `protobuf:"bytes,7,opt,name=NoticeGroup,proto3" json:"NoticeGroup"`
	NoticeGroupOrderNo int32  `protobuf:"varint,8,opt,name=NoticeGroupOrderNo,proto3" json:"NoticeGroupOrderNo"`
	NoticeOpenType     int32  `protobuf:"varint,9,opt,name=NoticeOpenType,proto3" json:"NoticeOpenType"`
	NoticeViewCount    int64  `protobuf:"varint,10,opt,name=NoticeViewCount,proto3" json:"NoticeViewCount"`
}

func (x *ChatChannelNotice) Reset() {
	*x = ChatChannelNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatChannelNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatChannelNotice) ProtoMessage() {}

func (x *ChatChannelNotice) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatChannelNotice.ProtoReflect.Descriptor instead.
func (*ChatChannelNotice) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{21}
}

func (x *ChatChannelNotice) GetNoticeId() int64 {
	if x != nil {
		return x.NoticeId
	}
	return 0
}

func (x *ChatChannelNotice) GetProChannelId() int64 {
	if x != nil {
		return x.ProChannelId
	}
	return 0
}

func (x *ChatChannelNotice) GetNoticeTitle() string {
	if x != nil {
		return x.NoticeTitle
	}
	return ""
}

func (x *ChatChannelNotice) GetNoticeContentUrl() string {
	if x != nil {
		return x.NoticeContentUrl
	}
	return ""
}

func (x *ChatChannelNotice) GetNoticeContentText() string {
	if x != nil {
		return x.NoticeContentText
	}
	return ""
}

func (x *ChatChannelNotice) GetNoticeOrderNo() int32 {
	if x != nil {
		return x.NoticeOrderNo
	}
	return 0
}

func (x *ChatChannelNotice) GetNoticeGroup() string {
	if x != nil {
		return x.NoticeGroup
	}
	return ""
}

func (x *ChatChannelNotice) GetNoticeGroupOrderNo() int32 {
	if x != nil {
		return x.NoticeGroupOrderNo
	}
	return 0
}

func (x *ChatChannelNotice) GetNoticeOpenType() int32 {
	if x != nil {
		return x.NoticeOpenType
	}
	return 0
}

func (x *ChatChannelNotice) GetNoticeViewCount() int64 {
	if x != nil {
		return x.NoticeViewCount
	}
	return 0
}

type ChatMiniproInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProId      int64  `protobuf:"varint,1,opt,name=ProId,proto3" json:"ProId"`
	ProName    string `protobuf:"bytes,2,opt,name=ProName,proto3" json:"ProName"`
	AppId      string `protobuf:"bytes,3,opt,name=AppId,proto3" json:"AppId"`
	AppKey     string `protobuf:"bytes,4,opt,name=AppKey,proto3" json:"AppKey"`
	ProMemo    string `protobuf:"bytes,5,opt,name=ProMemo,proto3" json:"ProMemo"`
	AttachData string `protobuf:"bytes,6,opt,name=AttachData,proto3" json:"AttachData"`
}

func (x *ChatMiniproInfo) Reset() {
	*x = ChatMiniproInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatMiniproInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMiniproInfo) ProtoMessage() {}

func (x *ChatMiniproInfo) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMiniproInfo.ProtoReflect.Descriptor instead.
func (*ChatMiniproInfo) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{22}
}

func (x *ChatMiniproInfo) GetProId() int64 {
	if x != nil {
		return x.ProId
	}
	return 0
}

func (x *ChatMiniproInfo) GetProName() string {
	if x != nil {
		return x.ProName
	}
	return ""
}

func (x *ChatMiniproInfo) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *ChatMiniproInfo) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *ChatMiniproInfo) GetProMemo() string {
	if x != nil {
		return x.ProMemo
	}
	return ""
}

func (x *ChatMiniproInfo) GetAttachData() string {
	if x != nil {
		return x.AttachData
	}
	return ""
}

type K8HashUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         int64  `protobuf:"varint,1,opt,name=UserId,proto3" json:"UserId"`
	LoginName      string `protobuf:"bytes,2,opt,name=LoginName,proto3" json:"LoginName"`
	LoginPswd      string `protobuf:"bytes,3,opt,name=LoginPswd,proto3" json:"LoginPswd"`
	ParentId       int64  `protobuf:"varint,4,opt,name=ParentId,proto3" json:"ParentId"`
	ParentSeq      string `protobuf:"bytes,5,opt,name=ParentSeq,proto3" json:"ParentSeq"`
	InvitationCode string `protobuf:"bytes,6,opt,name=InvitationCode,proto3" json:"InvitationCode"`
	UserEnabled    int32  `protobuf:"varint,7,opt,name=UserEnabled,proto3" json:"UserEnabled"`
	TopLevel       int32  `protobuf:"varint,8,opt,name=TopLevel,proto3" json:"TopLevel"`
	DirectSubCount int32  `protobuf:"varint,9,opt,name=DirectSubCount,proto3" json:"DirectSubCount"`
	AllSubCount    int32  `protobuf:"varint,10,opt,name=AllSubCount,proto3" json:"AllSubCount"`
	RegDate        string `protobuf:"bytes,11,opt,name=RegDate,proto3" json:"RegDate"`
	RegTime        string `protobuf:"bytes,12,opt,name=RegTime,proto3" json:"RegTime"`
	AgentId        int64  `protobuf:"varint,13,opt,name=AgentId,proto3" json:"AgentId"`
	UserLevel      int32  `protobuf:"varint,14,opt,name=UserLevel,proto3" json:"UserLevel"`
	GameDate       string `protobuf:"bytes,15,opt,name=GameDate,proto3" json:"GameDate"`
	GameTime       string `protobuf:"bytes,16,opt,name=GameTime,proto3" json:"GameTime"`
	RegDomain      string `protobuf:"bytes,17,opt,name=RegDomain,proto3" json:"RegDomain"`
}

func (x *K8HashUser) Reset() {
	*x = K8HashUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashUser) ProtoMessage() {}

func (x *K8HashUser) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashUser.ProtoReflect.Descriptor instead.
func (*K8HashUser) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{23}
}

func (x *K8HashUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *K8HashUser) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *K8HashUser) GetLoginPswd() string {
	if x != nil {
		return x.LoginPswd
	}
	return ""
}

func (x *K8HashUser) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *K8HashUser) GetParentSeq() string {
	if x != nil {
		return x.ParentSeq
	}
	return ""
}

func (x *K8HashUser) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *K8HashUser) GetUserEnabled() int32 {
	if x != nil {
		return x.UserEnabled
	}
	return 0
}

func (x *K8HashUser) GetTopLevel() int32 {
	if x != nil {
		return x.TopLevel
	}
	return 0
}

func (x *K8HashUser) GetDirectSubCount() int32 {
	if x != nil {
		return x.DirectSubCount
	}
	return 0
}

func (x *K8HashUser) GetAllSubCount() int32 {
	if x != nil {
		return x.AllSubCount
	}
	return 0
}

func (x *K8HashUser) GetRegDate() string {
	if x != nil {
		return x.RegDate
	}
	return ""
}

func (x *K8HashUser) GetRegTime() string {
	if x != nil {
		return x.RegTime
	}
	return ""
}

func (x *K8HashUser) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *K8HashUser) GetUserLevel() int32 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *K8HashUser) GetGameDate() string {
	if x != nil {
		return x.GameDate
	}
	return ""
}

func (x *K8HashUser) GetGameTime() string {
	if x != nil {
		return x.GameTime
	}
	return ""
}

func (x *K8HashUser) GetRegDomain() string {
	if x != nil {
		return x.RegDomain
	}
	return ""
}

type ChatAgentMinipro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProId   int64 `protobuf:"varint,1,opt,name=ProId,proto3" json:"ProId"`
	AgentId int64 `protobuf:"varint,2,opt,name=AgentId,proto3" json:"AgentId"`
}

func (x *ChatAgentMinipro) Reset() {
	*x = ChatAgentMinipro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatAgentMinipro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatAgentMinipro) ProtoMessage() {}

func (x *ChatAgentMinipro) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatAgentMinipro.ProtoReflect.Descriptor instead.
func (*ChatAgentMinipro) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{24}
}

func (x *ChatAgentMinipro) GetProId() int64 {
	if x != nil {
		return x.ProId
	}
	return 0
}

func (x *ChatAgentMinipro) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

type ChatAgentOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId        int64 `protobuf:"varint,1,opt,name=AgentId,proto3" json:"AgentId"`
	OnlineDatetime int64 `protobuf:"varint,2,opt,name=OnlineDatetime,proto3" json:"OnlineDatetime"`
}

func (x *ChatAgentOnline) Reset() {
	*x = ChatAgentOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatAgentOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatAgentOnline) ProtoMessage() {}

func (x *ChatAgentOnline) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatAgentOnline.ProtoReflect.Descriptor instead.
func (*ChatAgentOnline) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{25}
}

func (x *ChatAgentOnline) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *ChatAgentOnline) GetOnlineDatetime() int64 {
	if x != nil {
		return x.OnlineDatetime
	}
	return 0
}

type K8HashUserLevelProp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLevel      int32  `protobuf:"varint,1,opt,name=UserLevel,proto3" json:"UserLevel"`
	CurrencyCode   string `protobuf:"bytes,2,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	OnceLimitQuota string `protobuf:"bytes,3,opt,name=OnceLimitQuota,proto3" json:"OnceLimitQuota"`
	DayLimitQuota  string `protobuf:"bytes,4,opt,name=DayLimitQuota,proto3" json:"DayLimitQuota"`
}

func (x *K8HashUserLevelProp) Reset() {
	*x = K8HashUserLevelProp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashUserLevelProp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashUserLevelProp) ProtoMessage() {}

func (x *K8HashUserLevelProp) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashUserLevelProp.ProtoReflect.Descriptor instead.
func (*K8HashUserLevelProp) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{26}
}

func (x *K8HashUserLevelProp) GetUserLevel() int32 {
	if x != nil {
		return x.UserLevel
	}
	return 0
}

func (x *K8HashUserLevelProp) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashUserLevelProp) GetOnceLimitQuota() string {
	if x != nil {
		return x.OnceLimitQuota
	}
	return ""
}

func (x *K8HashUserLevelProp) GetDayLimitQuota() string {
	if x != nil {
		return x.DayLimitQuota
	}
	return ""
}

type SysBaseGlobalEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId   int64  `protobuf:"varint,1,opt,name=EventId,proto3" json:"EventId"`
	EventName string `protobuf:"bytes,2,opt,name=EventName,proto3" json:"EventName"`
	EventDate string `protobuf:"bytes,3,opt,name=EventDate,proto3" json:"EventDate"`
	EventTime string `protobuf:"bytes,4,opt,name=EventTime,proto3" json:"EventTime"`
	EventMemo string `protobuf:"bytes,5,opt,name=EventMemo,proto3" json:"EventMemo"`
}

func (x *SysBaseGlobalEvent) Reset() {
	*x = SysBaseGlobalEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysBaseGlobalEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysBaseGlobalEvent) ProtoMessage() {}

func (x *SysBaseGlobalEvent) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysBaseGlobalEvent.ProtoReflect.Descriptor instead.
func (*SysBaseGlobalEvent) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{27}
}

func (x *SysBaseGlobalEvent) GetEventId() int64 {
	if x != nil {
		return x.EventId
	}
	return 0
}

func (x *SysBaseGlobalEvent) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *SysBaseGlobalEvent) GetEventDate() string {
	if x != nil {
		return x.EventDate
	}
	return ""
}

func (x *SysBaseGlobalEvent) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *SysBaseGlobalEvent) GetEventMemo() string {
	if x != nil {
		return x.EventMemo
	}
	return ""
}

type K8HashAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId        int64  `protobuf:"varint,1,opt,name=AgentId,proto3" json:"AgentId"`
	AgentName      string `protobuf:"bytes,2,opt,name=AgentName,proto3" json:"AgentName"`
	LoginName      string `protobuf:"bytes,3,opt,name=LoginName,proto3" json:"LoginName"`
	LoginPswd      string `protobuf:"bytes,4,opt,name=LoginPswd,proto3" json:"LoginPswd"`
	AgentEnabled   int32  `protobuf:"varint,5,opt,name=AgentEnabled,proto3" json:"AgentEnabled"`
	RegDate        string `protobuf:"bytes,6,opt,name=RegDate,proto3" json:"RegDate"`
	RegTime        string `protobuf:"bytes,7,opt,name=RegTime,proto3" json:"RegTime"`
	ParentId       int64  `protobuf:"varint,8,opt,name=ParentId,proto3" json:"ParentId"`
	ParentSeq      string `protobuf:"bytes,9,opt,name=ParentSeq,proto3" json:"ParentSeq"`
	TopLevel       int32  `protobuf:"varint,10,opt,name=TopLevel,proto3" json:"TopLevel"`
	DirectSubCount int32  `protobuf:"varint,11,opt,name=DirectSubCount,proto3" json:"DirectSubCount"`
	AllSubCount    int32  `protobuf:"varint,12,opt,name=AllSubCount,proto3" json:"AllSubCount"`
	AgentDomain    string `protobuf:"bytes,13,opt,name=AgentDomain,proto3" json:"AgentDomain"`
	IconUrl        string `protobuf:"bytes,14,opt,name=IconUrl,proto3" json:"IconUrl"`
}

func (x *K8HashAgent) Reset() {
	*x = K8HashAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashAgent) ProtoMessage() {}

func (x *K8HashAgent) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashAgent.ProtoReflect.Descriptor instead.
func (*K8HashAgent) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{28}
}

func (x *K8HashAgent) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *K8HashAgent) GetAgentName() string {
	if x != nil {
		return x.AgentName
	}
	return ""
}

func (x *K8HashAgent) GetLoginName() string {
	if x != nil {
		return x.LoginName
	}
	return ""
}

func (x *K8HashAgent) GetLoginPswd() string {
	if x != nil {
		return x.LoginPswd
	}
	return ""
}

func (x *K8HashAgent) GetAgentEnabled() int32 {
	if x != nil {
		return x.AgentEnabled
	}
	return 0
}

func (x *K8HashAgent) GetRegDate() string {
	if x != nil {
		return x.RegDate
	}
	return ""
}

func (x *K8HashAgent) GetRegTime() string {
	if x != nil {
		return x.RegTime
	}
	return ""
}

func (x *K8HashAgent) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *K8HashAgent) GetParentSeq() string {
	if x != nil {
		return x.ParentSeq
	}
	return ""
}

func (x *K8HashAgent) GetTopLevel() int32 {
	if x != nil {
		return x.TopLevel
	}
	return 0
}

func (x *K8HashAgent) GetDirectSubCount() int32 {
	if x != nil {
		return x.DirectSubCount
	}
	return 0
}

func (x *K8HashAgent) GetAllSubCount() int32 {
	if x != nil {
		return x.AllSubCount
	}
	return 0
}

func (x *K8HashAgent) GetAgentDomain() string {
	if x != nil {
		return x.AgentDomain
	}
	return ""
}

func (x *K8HashAgent) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

type K8HashMyReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardId                      int64  `protobuf:"varint,1,opt,name=RewardId,proto3" json:"RewardId"`
	UserRechargeTxId              string `protobuf:"bytes,2,opt,name=UserRechargeTxId,proto3" json:"UserRechargeTxId"`
	UserRechargeTxHash            string `protobuf:"bytes,3,opt,name=UserRechargeTxHash,proto3" json:"UserRechargeTxHash"`
	UserRechargeToPlatformAddress string `protobuf:"bytes,4,opt,name=UserRechargeToPlatformAddress,proto3" json:"UserRechargeToPlatformAddress"`
	SrcUserAddress                string `protobuf:"bytes,5,opt,name=SrcUserAddress,proto3" json:"SrcUserAddress"`
	SrcUserQuota                  string `protobuf:"bytes,6,opt,name=SrcUserQuota,proto3" json:"SrcUserQuota"`
	SrcUserId                     int64  `protobuf:"varint,7,opt,name=SrcUserId,proto3" json:"SrcUserId"`
	StrategyType                  int32  `protobuf:"varint,8,opt,name=StrategyType,proto3" json:"StrategyType"` // 游戏策略类型
	ToUserAddress                 string `protobuf:"bytes,9,opt,name=ToUserAddress,proto3" json:"ToUserAddress"`
	ToTxId                        string `protobuf:"bytes,10,opt,name=ToTxId,proto3" json:"ToTxId"`
	ToTxHash                      string `protobuf:"bytes,11,opt,name=ToTxHash,proto3" json:"ToTxHash"`
	ToUserQuota                   string `protobuf:"bytes,12,opt,name=ToUserQuota,proto3" json:"ToUserQuota"`
	ToConfirms                    int32  `protobuf:"varint,13,opt,name=ToConfirms,proto3" json:"ToConfirms"`
	CurrencyCode                  string `protobuf:"bytes,14,opt,name=CurrencyCode,proto3" json:"CurrencyCode"`
	TradeMemo                     string `protobuf:"bytes,15,opt,name=TradeMemo,proto3" json:"TradeMemo"`
	TradeDate                     string `protobuf:"bytes,16,opt,name=TradeDate,proto3" json:"TradeDate"`
	TradeTime                     string `protobuf:"bytes,17,opt,name=TradeTime,proto3" json:"TradeTime"`
	ReturnStatus                  int32  `protobuf:"varint,18,opt,name=ReturnStatus,proto3" json:"ReturnStatus"`
	WinOk                         int32  `protobuf:"varint,19,opt,name=WinOk,proto3" json:"WinOk"`
}

func (x *K8HashMyReward) Reset() {
	*x = K8HashMyReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_CommonProtoDBmodel_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *K8HashMyReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K8HashMyReward) ProtoMessage() {}

func (x *K8HashMyReward) ProtoReflect() protoreflect.Message {
	mi := &file_CommonProtoDBmodel_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K8HashMyReward.ProtoReflect.Descriptor instead.
func (*K8HashMyReward) Descriptor() ([]byte, []int) {
	return file_CommonProtoDBmodel_proto_rawDescGZIP(), []int{29}
}

func (x *K8HashMyReward) GetRewardId() int64 {
	if x != nil {
		return x.RewardId
	}
	return 0
}

func (x *K8HashMyReward) GetUserRechargeTxId() string {
	if x != nil {
		return x.UserRechargeTxId
	}
	return ""
}

func (x *K8HashMyReward) GetUserRechargeTxHash() string {
	if x != nil {
		return x.UserRechargeTxHash
	}
	return ""
}

func (x *K8HashMyReward) GetUserRechargeToPlatformAddress() string {
	if x != nil {
		return x.UserRechargeToPlatformAddress
	}
	return ""
}

func (x *K8HashMyReward) GetSrcUserAddress() string {
	if x != nil {
		return x.SrcUserAddress
	}
	return ""
}

func (x *K8HashMyReward) GetSrcUserQuota() string {
	if x != nil {
		return x.SrcUserQuota
	}
	return ""
}

func (x *K8HashMyReward) GetSrcUserId() int64 {
	if x != nil {
		return x.SrcUserId
	}
	return 0
}

func (x *K8HashMyReward) GetStrategyType() int32 {
	if x != nil {
		return x.StrategyType
	}
	return 0
}

func (x *K8HashMyReward) GetToUserAddress() string {
	if x != nil {
		return x.ToUserAddress
	}
	return ""
}

func (x *K8HashMyReward) GetToTxId() string {
	if x != nil {
		return x.ToTxId
	}
	return ""
}

func (x *K8HashMyReward) GetToTxHash() string {
	if x != nil {
		return x.ToTxHash
	}
	return ""
}

func (x *K8HashMyReward) GetToUserQuota() string {
	if x != nil {
		return x.ToUserQuota
	}
	return ""
}

func (x *K8HashMyReward) GetToConfirms() int32 {
	if x != nil {
		return x.ToConfirms
	}
	return 0
}

func (x *K8HashMyReward) GetCurrencyCode() string {
	if x != nil {
		return x.CurrencyCode
	}
	return ""
}

func (x *K8HashMyReward) GetTradeMemo() string {
	if x != nil {
		return x.TradeMemo
	}
	return ""
}

func (x *K8HashMyReward) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *K8HashMyReward) GetTradeTime() string {
	if x != nil {
		return x.TradeTime
	}
	return ""
}

func (x *K8HashMyReward) GetReturnStatus() int32 {
	if x != nil {
		return x.ReturnStatus
	}
	return 0
}

func (x *K8HashMyReward) GetWinOk() int32 {
	if x != nil {
		return x.WinOk
	}
	return 0
}

var File_CommonProtoDBmodel_proto protoreflect.FileDescriptor

var file_CommonProtoDBmodel_proto_rawDesc = []byte{
	0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x42, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x22, 0xd7, 0x01, 0x0a, 0x15, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa9, 0x05, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x4f, 0x75, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x53, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x12,
	0x28, 0x0a, 0x0f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x41, 0x72, 0x65, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x49, 0x73, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72,
	0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d,
	0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x73, 0x50, 0x69, 0x63, 0x6b, 0x55, 0x70, 0x12,
	0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x49, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xd6, 0x03, 0x0a, 0x16, 0x4b, 0x38, 0x48, 0x61, 0x73, 0x68, 0x42, 0x65, 0x61, 0x74, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x42, 0x65, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x65, 0x61, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x65, 0x61, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x65, 0x61, 0x74, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x6e, 0x4f, 0x6b, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x6e, 0x4f, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x49, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8a, 0x04, 0x0a, 0x16, 0x4b, 0x38, 0x48,
	0x61, 0x73, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x78, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x46,
	0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x69, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x72, 0x6f, 0x6d, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x6f, 0x54, 0x78, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x6f, 0x54, 0x78, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x1a, 0x4b, 0x38, 0x48, 0x61, 0x73, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x1e, 0x4b, 0x38, 0x48,
	0x61, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x62, 0x61, 0x74,
	0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x6c, 0x6f,
	0x77, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x78, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x78, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46,
	0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xba, 0x01,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x49, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x56,
	0x69, 0x73, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x44, 0x62, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e,
	0x44, 0x62, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x44, 0x62, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x44, 0x62, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x49, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x74,
	0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4f, 0x75, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x61, 0x72, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x57,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x57, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x65, 0x71, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x53, 0x65, 0x71, 0x12, 0x1a, 0x0a,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x4f, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0x8d, 0x03, 0x0a, 0x19, 0x4b, 0x38,
	0x48, 0x61, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x02, 0x0a, 0x0e, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4d, 0x73, 0x67,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x73,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x6e, 0x64,
	0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe6, 0x03, 0x0a, 0x10, 0x4b, 0x38, 0x48, 0x61, 0x73,
	0x68, 0x42, 0x63, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x78, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x72, 0x63,
	0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x72, 0x63,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x72,
	0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x6e, 0x4f, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x6e, 0x4f, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x57, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x57, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22,
	0xb6, 0x03, 0x0a, 0x0a, 0x4b, 0x38, 0x48, 0x61, 0x73, 0x68, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x42, 0x65, 0x74, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x73, 0x68, 0x52, 0x65, 0x62, 0x61,
	0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x31, 0x12, 0x2e, 0x0a, 0x12,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x74,
	0x65, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x32, 0x12, 0x1e, 0x0a, 0x0a,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x6f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x47, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xb6, 0x03, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x49, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x44,
	0x62, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x44,
	0x62, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x44, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x44, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x30, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x30, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x70, 0x41,
	0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x70, 0x41,
	0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x22, 0x0a,
	0x0c, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x33, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x70, 0x41, 0x72, 0x65, 0x61, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x49, 0x70, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8a, 0x06, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x70, 0x72,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x72,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x34,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x50,
	0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x72,
	0x65, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3a,
	0x0a, 0x18, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x72,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x69,
	0x70, 0x72, 0x6f, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4a, 0x75, 0x6d, 0x70, 0x4d, 0x69,
	0x6e, 0x69, 0x70, 0x72, 0x6f, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2e,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6b, 0x47, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x50, 0x72, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6b, 0x47, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6b, 0x47, 0x6f,
	0x55, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x72, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6b, 0x47, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x13,
	0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x50, 0x72, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9d,
	0x03, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x74, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x43, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x43, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x57, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x57, 0x65, 0x63, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x6b, 0x12, 0x24, 0x0a, 0x0d,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65,
	0x6d, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xfb,
	0x01, 0x0a, 0x15, 0x4b, 0x38, 0x48, 0x61, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6b, 0x0a, 0x0f,
	0x53, 0x79, 0x73, 0x42, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x42, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x42, 0x61, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x53, 0x79,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x73, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x73, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x15,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x57, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d,
	0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65, 0x6c, 0x63, 0x6f,
	0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x65,
	0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x57, 0x65, 0x6c,
	0x63, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0xd1, 0x04, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x63, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x61,
	0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6b, 0x22, 0x99, 0x03, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2c, 0x0a,
	0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x69,
	0x6e, 0x69, 0x70, 0x72, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x72, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x4d, 0x65,
	0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x4d, 0x65, 0x6d,
	0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x8c, 0x04, 0x0a, 0x0a, 0x4b, 0x38, 0x48, 0x61, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50,
	0x73, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x73, 0x77, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x12, 0x26,
	0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x70, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x67, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x22, 0x42, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x70, 0x72, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x4b, 0x38,
	0x48, 0x61, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x6e, 0x63,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x44,
	0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x44, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x22, 0xa6, 0x01, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x42, 0x61, 0x73, 0x65, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xb5, 0x03, 0x0a, 0x0b, 0x4b,
	0x38, 0x48, 0x61, 0x73, 0x68, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x73, 0x77, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x50, 0x73, 0x77, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x52, 0x65, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52,
	0x65, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x54, 0x6f, 0x70, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x41, 0x6c, 0x6c, 0x53, 0x75,
	0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x63, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x63, 0x6f, 0x6e, 0x55,
	0x72, 0x6c, 0x22, 0xb0, 0x05, 0x0a, 0x0e, 0x4b, 0x38, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x79, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x78, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x44, 0x0a,
	0x1d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x6f, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x72, 0x63,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x53,
	0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x53, 0x72, 0x63, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x54, 0x78, 0x49,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x54, 0x78, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x6f, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x57, 0x69, 0x6e, 0x4f, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x57, 0x69, 0x6e, 0x4f, 0x6b, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f, 0x64, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_CommonProtoDBmodel_proto_rawDescOnce sync.Once
	file_CommonProtoDBmodel_proto_rawDescData = file_CommonProtoDBmodel_proto_rawDesc
)

func file_CommonProtoDBmodel_proto_rawDescGZIP() []byte {
	file_CommonProtoDBmodel_proto_rawDescOnce.Do(func() {
		file_CommonProtoDBmodel_proto_rawDescData = protoimpl.X.CompressGZIP(file_CommonProtoDBmodel_proto_rawDescData)
	})
	return file_CommonProtoDBmodel_proto_rawDescData
}

var file_CommonProtoDBmodel_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_CommonProtoDBmodel_proto_goTypes = []interface{}{
	(*ChatChannelAutoReplay)(nil),          // 0: dbserver_grpc.ChatChannelAutoReplay
	(*ChatWechatOutImport)(nil),            // 1: dbserver_grpc.ChatWechatOutImport
	(*K8HashBeatOtherSession)(nil),         // 2: dbserver_grpc.K8HashBeatOtherSession
	(*K8HashCurrencyExchange)(nil),         // 3: dbserver_grpc.K8HashCurrencyExchange
	(*K8HashUserCashRebateWallet)(nil),     // 4: dbserver_grpc.K8HashUserCashRebateWallet
	(*K8HashUserCashRebateWalletFlow)(nil), // 5: dbserver_grpc.K8HashUserCashRebateWalletFlow
	(*ChatIpChannelVisit)(nil),             // 6: dbserver_grpc.ChatIpChannelVisit
	(*ChatSessionEvent)(nil),               // 7: dbserver_grpc.ChatSessionEvent
	(*ChatWechatOutImportOper)(nil),        // 8: dbserver_grpc.ChatWechatOutImportOper
	(*K8HashUserShareWalletFlow)(nil),      // 9: dbserver_grpc.K8HashUserShareWalletFlow
	(*ChatSessionMsg)(nil),                 // 10: dbserver_grpc.ChatSessionMsg
	(*K8HashBcRecharge)(nil),               // 11: dbserver_grpc.K8HashBcRecharge
	(*K8HashGame)(nil),                     // 12: dbserver_grpc.K8HashGame
	(*ChatIpInfo)(nil),                     // 13: dbserver_grpc.ChatIpInfo
	(*ChatMiniproChannel)(nil),             // 14: dbserver_grpc.ChatMiniproChannel
	(*ChatWechatMatchRecord)(nil),          // 15: dbserver_grpc.ChatWechatMatchRecord
	(*K8HashUserShareWallet)(nil),          // 16: dbserver_grpc.K8HashUserShareWallet
	(*SysBaseKeyValue)(nil),                // 17: dbserver_grpc.SysBaseKeyValue
	(*SysBaseOperator)(nil),                // 18: dbserver_grpc.SysBaseOperator
	(*ChatChannelWelcomeMsg)(nil),          // 19: dbserver_grpc.ChatChannelWelcomeMsg
	(*ChatSession)(nil),                    // 20: dbserver_grpc.ChatSession
	(*ChatChannelNotice)(nil),              // 21: dbserver_grpc.ChatChannelNotice
	(*ChatMiniproInfo)(nil),                // 22: dbserver_grpc.ChatMiniproInfo
	(*K8HashUser)(nil),                     // 23: dbserver_grpc.K8HashUser
	(*ChatAgentMinipro)(nil),               // 24: dbserver_grpc.ChatAgentMinipro
	(*ChatAgentOnline)(nil),                // 25: dbserver_grpc.ChatAgentOnline
	(*K8HashUserLevelProp)(nil),            // 26: dbserver_grpc.K8HashUserLevelProp
	(*SysBaseGlobalEvent)(nil),             // 27: dbserver_grpc.SysBaseGlobalEvent
	(*K8HashAgent)(nil),                    // 28: dbserver_grpc.K8HashAgent
	(*K8HashMyReward)(nil),                 // 29: dbserver_grpc.K8HashMyReward
}
var file_CommonProtoDBmodel_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_CommonProtoDBmodel_proto_init() }
func file_CommonProtoDBmodel_proto_init() {
	if File_CommonProtoDBmodel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_CommonProtoDBmodel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatChannelAutoReplay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatWechatOutImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashBeatOtherSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashCurrencyExchange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashUserCashRebateWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashUserCashRebateWalletFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatIpChannelVisit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSessionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatWechatOutImportOper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashUserShareWalletFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSessionMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashBcRecharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashGame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatIpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMiniproChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatWechatMatchRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashUserShareWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysBaseKeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysBaseOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatChannelWelcomeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatChannelNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatMiniproInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatAgentMinipro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatAgentOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashUserLevelProp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysBaseGlobalEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_CommonProtoDBmodel_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*K8HashMyReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_CommonProtoDBmodel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_CommonProtoDBmodel_proto_goTypes,
		DependencyIndexes: file_CommonProtoDBmodel_proto_depIdxs,
		MessageInfos:      file_CommonProtoDBmodel_proto_msgTypes,
	}.Build()
	File_CommonProtoDBmodel_proto = out.File
	file_CommonProtoDBmodel_proto_rawDesc = nil
	file_CommonProtoDBmodel_proto_goTypes = nil
	file_CommonProtoDBmodel_proto_depIdxs = nil
}
